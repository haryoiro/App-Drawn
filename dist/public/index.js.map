{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/public/UI.ts","webpack:///./src/public/index.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iDAAiD,mDAAmD,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAC2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,kBAAkB;AACzH,mGAAmG,kBAAkB;AACrH,uGAAuG,kBAAkB;AACzH,uGAAuG,kBAAkB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,kBAAkB;AAClC;AACA;AACA,gBAAgB;AAChB,iGAAiG,kBAAkB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qIAAqI;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qIAAqI;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qIAAqI;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,KAAK,WAAW;AAClE,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB,wEAAwE,mBAAmB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA,IAAI","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/public/index.ts\");\n","export default class Buttons {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.view = view;\r\n        this.barg = document.querySelector('#barg');\r\n        this.pencil = document.querySelector(\"#pencil\");\r\n        this.eraser = document.querySelector(\"#eraser\");\r\n        this.fill = document.querySelector(\"#fill\");\r\n        this.palatte = document.querySelector(\"#palatte\");\r\n        this.dl = document.querySelector(\"#download\");\r\n        this.chat = document.querySelector(\"#textChat\");\r\n        this.pencilSettingWindow = document.querySelector('.pencil-settings');\r\n        this.eraserSettingWindow = document.querySelector('.eraser-settings');\r\n        this.chatWindow = document.querySelector('.chat-window');\r\n        this.sliders = document.getElementsByTagName('input');\r\n    }\r\n    sliderElementSetup() {\r\n        let penSize = this.sliders[0], penAlpha = this.sliders[1], penSmooth = this.sliders[2], eraSize = this.sliders[3], eraAplha = this.sliders[4], eraSmooth = this.sliders[5];\r\n        penSize.addEventListener('input', () => {\r\n            this.view.penRadius = parseInt(penSize.value, 10);\r\n        });\r\n        eraSize.addEventListener('input', () => { this.view.eraRadius = parseInt(eraSize.value, 10); });\r\n    }\r\n    elementActivate() {\r\n        this.sliderElementSetup();\r\n        this.barg.addEventListener('click', () => {\r\n            this.pencilSettingWindow.classList.toggle('show', false);\r\n            this.eraserSettingWindow.classList.toggle('show', false);\r\n            this.chatWindow.classList.toggle('show', false);\r\n        });\r\n        this.pencil.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.pencil.classList.contains('active') ? this.pencil.classList.contains(' ') : this.pencil.classList.add('active');\r\n            if (this.pencil.classList.contains('active')) {\r\n                this.eraser.classList.remove('active');\r\n                this.fill.classList.remove('active');\r\n                this.chat.classList.remove('active');\r\n                this.pencil.classList.add('active');\r\n                this.view.eraserToggle = false;\r\n            }\r\n            this.pencilSettingWindow.classList.toggle('show', true);\r\n            this.eraserSettingWindow.classList.toggle('show', false);\r\n            this.chatWindow.classList.toggle('show', false);\r\n        });\r\n        this.eraser.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.eraser.classList.contains('active') ? this.eraser.classList.contains(' ') : this.eraser.classList.add('active');\r\n            if (this.eraser.classList.contains('active')) {\r\n                this.pencil.classList.remove('active');\r\n                this.fill.classList.remove('active');\r\n                this.chat.classList.remove('active');\r\n                this.eraser.classList.add('active');\r\n                this.view.eraserToggle = true;\r\n            }\r\n            this.eraserSettingWindow.classList.toggle('show', true);\r\n            this.pencilSettingWindow.classList.toggle('show', false);\r\n            this.chatWindow.classList.toggle('show', false);\r\n        });\r\n        this.chat.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.chat.classList.contains('active') ? this.chat.classList.contains(' ') : this.chat.classList.add('active');\r\n            if (this.chat.classList.contains('active')) {\r\n                this.pencil.classList.remove('active');\r\n                this.fill.classList.remove('active');\r\n                this.eraser.classList.remove('active');\r\n                this.chat.classList.add('active');\r\n            }\r\n            this.chatWindow.classList.toggle('show', true);\r\n            this.pencilSettingWindow.classList.toggle('show', false);\r\n            this.eraserSettingWindow.classList.toggle('show', false);\r\n        });\r\n    }\r\n}\r\n","const socketOption = {\r\n    reconnectionDelay: 50000,\r\n    transports: ['websocket', 'polling']\r\n};\r\n// const socket = io(\"http://localhost\", socketOption)\r\nconst socket = io(\"https://app-drawn.herokuapp.com\", socketOption);\r\nimport Buttons from './UI';\r\nclass Application {\r\n    constructor(canvas, context2D) {\r\n        this.canvas = canvas;\r\n        this.context2D = context2D;\r\n        this.canvas = canvas;\r\n        this.context2D = context2D;\r\n    }\r\n    setUpView(width, height, color, hide = false, smooth = false) {\r\n        this._settingCanvasSize(width, height);\r\n        this._backgroundColor(color);\r\n        this._hideMenuHandler(hide);\r\n        this._isImageSmoothing(smooth);\r\n    }\r\n    _settingCanvasSize(width, height) {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n    clearAll() {\r\n        this.context2D.clearRect(0, 0, this.width, this.height);\r\n        this.context2D.beginPath();\r\n    }\r\n    _backgroundColor(color) {\r\n        this.context2D.fillStyle = color;\r\n        this.context2D.fillRect(0, 0, this.width, this.height);\r\n    }\r\n    _hideMenuHandler(bool) {\r\n        if (bool) {\r\n            document.addEventListener('contextmenu', e => e.preventDefault());\r\n            document.addEventListener('MSHoldVisal', e => e.preventDefault());\r\n        }\r\n    }\r\n    _isImageSmoothing(bool) {\r\n        this.context2D.imageSmoothingEnabled = bool;\r\n    }\r\n    // *getter/setter Method\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    set width(value) {\r\n        this._width = value;\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    set height(value) {\r\n        this._height = value;\r\n    }\r\n}\r\nconst eventStack = [];\r\nexport default class Tools extends Application {\r\n    constructor(element, context2D) {\r\n        super(element, context2D);\r\n        // ----- ツール関連プロパティ\r\n        this.canvasColor = \"black\";\r\n        this.drawToggle = false;\r\n        this.eraserToggle = false;\r\n        this.pressureToggle = false;\r\n        // ----- PenSize用プロパティ -----\r\n        this.defRad = 10;\r\n        this.capStyle = 'round';\r\n        this.joinStyle = 'round';\r\n        this._pinchToggle = false;\r\n        // ---- - UndoRedo -------\r\n        // private STACK_MAX_SIZE: number = 100\r\n        // private undoStack = []\r\n        // private redoStack = []\r\n        this.emitStack = [];\r\n        this.eventActivation();\r\n    }\r\n    eventActivation() {\r\n        if (window.PointerEvent) {\r\n            this.canvas.addEventListener('pointerdown', (event) => this.downPointerController(event), { passive: false, });\r\n            this.canvas.addEventListener('pointerup', (event) => this.upPointerController(event), { passive: false, });\r\n            this.canvas.addEventListener('pointermove', (event) => this.movePointerController(event), { passive: false, });\r\n            this.canvas.addEventListener('pointercancel', (event) => this.leavePointerHandler(event), { passive: false, });\r\n            document.addEventListener('wheel', (event) => {\r\n                event.preventDefault();\r\n                this.nowR ? this.nowR : this.nowR = 1;\r\n                this.zoomX = event.pageX;\r\n                this.zoomY = event.pageY;\r\n                if (event.deltaY > 1) {\r\n                    this.nowR -= 0.2;\r\n                }\r\n                else if (event.deltaY < -1) {\r\n                    this.nowR += 0.2;\r\n                }\r\n                this._pinchHandle(event);\r\n            }, { passive: false, });\r\n            // this.canvas.addEventListener('pointerleave', event => this.leavePointerHandler(event), {\r\n            //   passive: false,\r\n            // });\r\n            document.addEventListener('pointerout', (event) => this.leavePointerHandler(event), { passive: false, });\r\n        }\r\n        else {\r\n            this.canvas.addEventListener('mousedown', (event) => this.downMouseHandler(event));\r\n            this.canvas.addEventListener('mouseup', (event) => this.upMouseHandler(event));\r\n            this.canvas.addEventListener('mousemove', (event) => this.moveMouseHandler(event));\r\n            this.canvas.addEventListener('mouseleave', (event) => this.leaveMouseHandler(event));\r\n        }\r\n    }\r\n    pointerSwitcher(event, pen, touch, mouse) {\r\n        switch (event.pointerType) {\r\n            case 'pen':\r\n                pen;\r\n                break;\r\n            case 'touch':\r\n                touch;\r\n                break;\r\n            case 'mouse':\r\n                mouse;\r\n                break;\r\n        }\r\n    }\r\n    // ---- PointerEvents ---\r\n    // !------ Switcher ------\r\n    // *- Main Callback Functions -\r\n    downPointerController(event) {\r\n        event.preventDefault();\r\n        this.pointerSwitcher(event, this.handlePenDown(event), this.handleTouchDown(event), this.handleMouseDown(event));\r\n    }\r\n    movePointerController(event) {\r\n        event.preventDefault();\r\n        this.pointerSwitcher(event, this.handlePenMove(event), this.handleTouchMove(event), this.handleMouseMove(event));\r\n    }\r\n    upPointerController(event) {\r\n        event.preventDefault();\r\n        this.pointerSwitcher(event, this.handlePenUp(event), this.handleTouchUp(event), this.handleMouseUp(event));\r\n    }\r\n    // ---- PointerEvents ---\r\n    // *------- DOWN -------\r\n    handlePenDown(event) {\r\n        event.preventDefault();\r\n        this.context2D.beginPath();\r\n        this.drawToggle = true;\r\n    }\r\n    handleTouchDown(event) {\r\n        event.preventDefault();\r\n        this.context2D.beginPath();\r\n        eventStack.push(event);\r\n        if (eventStack.length === 1) {\r\n            this.drawToggle = true;\r\n            this.p1 = eventStack[0];\r\n        }\r\n        if (eventStack.length >= 2) {\r\n            this.drawToggle = false;\r\n            this.p2 = eventStack[1];\r\n            this.pinchDist = this._calclationPointsDistance(this.p1.pageX, this.p1.pageY, this.p2.pageX, this.p2.pageY);\r\n            this.tp1x = (eventStack[0].pageX - this.canvas.offsetLeft);\r\n            this.tp1y = (eventStack[0].pageY - this.canvas.offsetTop);\r\n            this.distX = (eventStack[0].pageX - this.tp1x);\r\n            this.distY = (eventStack[0].pageY - this.tp1y);\r\n            this.nowR = this.dist / this.pinchDist;\r\n        }\r\n    }\r\n    handleMouseDown(event) {\r\n        event.preventDefault();\r\n        this.context2D.beginPath();\r\n        this.drawToggle = true;\r\n    }\r\n    // ---- PointerEvents ---\r\n    // *------- MOVE -------\r\n    handlePenMove(event) {\r\n        event.preventDefault();\r\n        if (this.drawToggle) {\r\n            this.context2D.lineWidth = this.initializePressure(event);\r\n            this.pencilTool(event);\r\n            this.stackPoint(this._pressurePoints(event));\r\n        }\r\n    }\r\n    handleMouseMove(event) {\r\n        event.preventDefault();\r\n        if (this.drawToggle) {\r\n            this.context2D.lineWidth = this.initializePressure(event);\r\n            this.pencilTool(event);\r\n            this.stackPoint(this._pressurePoints(event));\r\n        }\r\n    }\r\n    handleTouchMove(event) {\r\n        event.preventDefault();\r\n        for (let i = 0; i < eventStack.length; i++) {\r\n            if (eventStack[i].pointerId === event.pointerId) {\r\n                eventStack[i] = event;\r\n            }\r\n        }\r\n        if (eventStack.length >= 3) {\r\n            this.drawToggle = false;\r\n            eventStack.splice(0, 2);\r\n        }\r\n        this.p1 = eventStack[0];\r\n        if (eventStack.length < 1 && this.drawToggle) {\r\n            this.context2D.lineWidth = this.initializePressure(event);\r\n            this.eraseTool();\r\n            this.settingPenConf(this.canvasColor, this.capStyle, this.joinStyle);\r\n            this.drawLine(event.offsetX, event.offsetY);\r\n            this.stackPoint(this._pressurePoints(event));\r\n        }\r\n        if (eventStack.length >= 2) {\r\n            this.p2 = eventStack[1];\r\n            this.drawToggle = false;\r\n            this.dist = this._calclationPointsDistance(this.p1.pageX, this.p1.pageY, this.p2.pageX, this.p2.pageY);\r\n            this.nowR = this.dist / this.pinchDist;\r\n            this.distX = (eventStack[0].pageX - this.tp1x);\r\n            this.distY = (eventStack[0].pageY - this.tp1y);\r\n        }\r\n        this._pinchHandle(event);\r\n    }\r\n    // ---- PointerEvents ---\r\n    // *--------  UP  --------\r\n    handlePenUp(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = false;\r\n        this.emitStack.push({ color: this.canvasColor, cap: this.capStyle, join: this.joinStyle, erase: this.eraserToggle, width: this.initializePressure(event) });\r\n        this.emitPoint(this.emitStack);\r\n        this.emitStack = [];\r\n        this.context2D.beginPath();\r\n    }\r\n    handleTouchUp(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = false;\r\n        this.emitStack.push({ color: this.canvasColor, cap: this.capStyle, join: this.joinStyle, erase: this.eraserToggle, width: this.initializePressure(event) });\r\n        this.emitPoint(this.emitStack);\r\n        this.emitStack = [];\r\n        this.context2D.beginPath();\r\n        this._removeEventStack(event);\r\n    }\r\n    handleMouseUp(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = false;\r\n        this.emitStack.push({ color: this.canvasColor, cap: this.capStyle, join: this.joinStyle, erase: this.eraserToggle, width: this.initializePressure(event) });\r\n        this.emitPoint(this.emitStack);\r\n        this.emitStack = [];\r\n        this.context2D.beginPath();\r\n    }\r\n    // ---- PointerEvents ---\r\n    // *------- LEAVE -------\r\n    leavePointerHandler(event) {\r\n        event.preventDefault();\r\n        this.context2D.beginPath();\r\n        this.drawToggle = false;\r\n    }\r\n    // ---- MouseEvents ----\r\n    // *-- LEGACY EVENTS --\r\n    downMouseHandler(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = true;\r\n    }\r\n    moveMouseHandler(event) {\r\n        event.preventDefault;\r\n        if (this.drawToggle) {\r\n            this.context2D.lineWidth = this.initializePressure({ pressure: 0.5 });\r\n            this.pencilTool(event);\r\n            this.stackPoint(this._simplePoints(event, 0.5));\r\n        }\r\n    }\r\n    upMouseHandler(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = false;\r\n        this.context2D.beginPath();\r\n    }\r\n    leaveMouseHandler(event) {\r\n        event.preventDefault();\r\n        this.drawToggle = false;\r\n    }\r\n    // ---- PencilTools ----\r\n    pencilTool(event) {\r\n        this.eraseTool();\r\n        this.settingPenConf(this.canvasColor, this.capStyle, this.joinStyle);\r\n        this.drawLine(event.offsetX, event.offsetY);\r\n    }\r\n    settingPenConf(color, capStyle, JoinStyle) {\r\n        this.context2D.strokeStyle = color;\r\n        this.context2D.fillStyle = color;\r\n        this.context2D.lineCap = capStyle;\r\n        this.context2D.lineJoin = JoinStyle;\r\n    }\r\n    drawLine(x, y) {\r\n        this.context2D.lineTo(x, y);\r\n        this.context2D.stroke();\r\n        this.context2D.beginPath();\r\n        this.context2D.moveTo(x, y);\r\n    }\r\n    eraseTool() {\r\n        if (this.eraserToggle) {\r\n            this.defRad = this.eraRadius;\r\n            this.context2D.globalCompositeOperation = 'destination-out';\r\n        }\r\n        else {\r\n            this.defRad = this.penRadius;\r\n            this.context2D.globalCompositeOperation = 'source-over';\r\n        }\r\n    }\r\n    setPencilColor(color) {\r\n        this.canvasColor = color;\r\n    }\r\n    _calclationPointsDistance(x1, y1, x2, y2) {\r\n        const X = x1 - x2;\r\n        const Y = y1 - y2;\r\n        return Math.sqrt(X * X + Y * Y) / 2;\r\n    }\r\n    // 異常な筆圧値を丸める、筆圧によりペンのサイズを漸強/漸弱させる\r\n    initializePressure(event) {\r\n        this.eraseTool();\r\n        if (event.pressure < 0.995 || event.pressure > 0.05) {\r\n            event.pressure ? (this.defRad *= event.pressure) : (this.defRad /= event.pressure);\r\n            return this.defRad;\r\n        }\r\n        else if (event.pressure <= 0.05 || event.pressure > 0.01) {\r\n            return this.defRad *= 0.05;\r\n        }\r\n        else if (event.pressure >= 0.995) {\r\n            return this.defRad *= 0.995;\r\n        }\r\n        else {\r\n            return this.defRad *= 0.5;\r\n        }\r\n    }\r\n    // タッチイベントをスタックから削除\r\n    _removeEventStack(event) {\r\n        for (let i = 0; i < eventStack.length; i++) {\r\n            if (eventStack[i].pointerId === event.pointerId) {\r\n                eventStack.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    // ピンチズーム処理\r\n    _pinchHandle(event) {\r\n        let style = document.getElementById('canvas').style;\r\n        let scale;\r\n        const dpr = window.devicePixelRatio || 1;\r\n        if (this.nowR >= 20) {\r\n            this.nowR = 10;\r\n        }\r\n        else if (this.nowR <= 0.05) {\r\n            this.nowR = 0.05;\r\n        }\r\n        else {\r\n            style.transformOrigin = `${this.zoomX}px ${this.zoomY}px`;\r\n            scale = `scale(${this.nowR * dpr})`;\r\n        }\r\n        style.left = this.distX + 'px';\r\n        style.top = this.distY + 'px';\r\n        style.transform = scale;\r\n        style.webkitTransform = scale;\r\n        //@ts-ignore\r\n        style.MozTransform = scale;\r\n        //@ts-ignore\r\n        style.msTransform = scale;\r\n    }\r\n    _pressurePoints(event) {\r\n        return { X: event.offsetX, Y: event.offsetY, pressure: this.initializePressure(event) };\r\n    }\r\n    _simplePoints(event, number) {\r\n        return { X: event.offsetX, Y: event.offsetY, pressure: this.initializePressure({ pressure: number }) };\r\n    }\r\n    abs(number) {\r\n        return (number * number) / 2;\r\n    }\r\n    undoRedo() {\r\n    }\r\n    // ---- - Socket.IO -----\r\n    stackPoint(pointObj) {\r\n        this.emitStack.push(pointObj);\r\n    }\r\n    emitPoint(pointObj) {\r\n        this.emitStack.splice(0, 1);\r\n        socket.emit('point', pointObj);\r\n    }\r\n}\r\nclass socketer {\r\n    constructor() {\r\n    }\r\n    pointerAsync() {\r\n        socket.on('allCanvas', (canvas) => {\r\n            for (let o in canvas) {\r\n                let points = canvas[o];\r\n                for (let i in points) {\r\n                    console.log(points);\r\n                    view.settingPenConf(points[i][points[i].length - 1].color, points[i][points[i].length - 1].cap, points[i][points[i].length - 1].join);\r\n                    if (points[i][points.length - 1].erase) {\r\n                        view.context2D.globalCompositeOperation = 'destination-out';\r\n                    }\r\n                    else {\r\n                        view.context2D.globalCompositeOperation = 'source-over';\r\n                    }\r\n                    view.context2D.lineWidth = points[i].pressure;\r\n                    view.drawLine(points[i].X, points[i].Y);\r\n                }\r\n                view.context2D.beginPath();\r\n                view.eraseTool();\r\n            }\r\n        });\r\n        socket.on('point', (points) => {\r\n            view.settingPenConf(points[points.length - 1].color, points[points.length - 1].cap, points[points.length - 1].join);\r\n            if (points[points.length - 1].erase) {\r\n                view.context2D.globalCompositeOperation = 'destination-out';\r\n            }\r\n            else {\r\n                view.context2D.globalCompositeOperation = 'source-over';\r\n            }\r\n            for (let i in points) {\r\n                view.context2D.lineWidth = points[i].pressure;\r\n                view.drawLine(points[i].X, points[i].Y);\r\n            }\r\n            view.eraseTool();\r\n            view.context2D.beginPath();\r\n        });\r\n        socket.on('clear', () => {\r\n            view.context2D.clearRect(0, 0, 1920, 1080);\r\n        });\r\n    }\r\n}\r\n// const virtualCanvas = <CanvasRenderingContext2D>document.createElement('canvas').getContext('2d')\r\n// document.addEventListener('pointermove', (event: PointerEvent) => {\r\n//     // virtualCanvas.arc(event.pageX, event.pageY)\r\n// })\r\nconst canvas = document.querySelector('#canvas');\r\nconst graphic = canvas.getContext('2d');\r\nconst view = new Tools(canvas, graphic);\r\n// Application.prototype.serUpView\r\n//    (context , backgroundColor, hideMenu, smoothRendering)\r\nview.setUpView(1920, 1080, '#ffffff', true, false);\r\nconst socketInit = new socketer();\r\nsocketInit.pointerAsync();\r\nconst domButton = new Buttons(view);\r\ndomButton.elementActivate();\r\n// const clearButton = document.getElementById('clear')\r\n// clearButton?.addEventListener('click', () => {\r\n//   view.context2D.clearRect(0, 0, 1920, 1080)\r\n//   socket.emit('clear')\r\n// })\r\n"],"sourceRoot":""}